type ordinal_feature = {
  feature_id : int;
  feature_name_opt : string option;
} <ocaml field_prefix="of_">

type categorical_feature = {
  feature_id : int;
  feature_name_opt : string option;
  categories : string list;

  (* if [anonymous_category_index_opt] is [Some i], then the elements
     in [categories] have indexes [0 ... i-1] and [i+1 ... n-1], where
     [n] is [(List.length categories) + 1] *)
  anonymous_category_index_opt : int option;
} <ocaml field_prefix="cf_">

type feature = [
  | CategoricalFeature of categorical_feature
  | OrdinalFeature of ordinal_feature
]

type 'c point <ocaml from="Proto" predef> = {
  (* what is the value of the piecewise function at the split? *)
  s_gamma : 'c ;

  (* how many observations does the split cover? *)
  s_n : float ;

  (* what is the loss? *)
  s_loss  : float ;
}

type ('a, 'b, 'c) categorical_node = {
  feature_id : int;
  category_directions : 'b;
  left_tree  : ('a, 'b, 'c) tree;
  right_tree : ('a, 'b, 'c) tree;
  left_stats : 'c point;
  right_stats: 'c point;
} <ocaml field_prefix="cn_">

type ('a, 'b, 'c) ordinal_node = {
  feature_id : int;
  split      : 'a;
  left_tree  : ('a, 'b, 'c) tree;
  right_tree : ('a, 'b, 'c) tree;
  left_stats : 'c point;
  right_stats: 'c point;
} <ocaml field_prefix="on_">

type ('a, 'b, 'c) tree = [
  | Leaf of 'c
  | CategoricalNode of ('a, 'b, 'c) categorical_node
  | OrdinalNode of ('a, 'b, 'c) ordinal_node
]

type category_direction = [ Left | Right ]
type direction_array = category_direction list <ocaml repr="array">

(* a run-length encoded array of booleans *)
type direction_rle = {
  first_direction : category_direction; (* the first value of the array *)
  run_lengths : int list (* list of run lengths *)
} <ocaml field_prefix="dr_">

type ('a, 'b, 'c) trees = ('a, 'b, 'c) tree list
type ('a, 'b, 'c) fold = {
  fold_id : int;
  mean: 'c;
  trees : ('a, 'b, 'c) trees;
}
type ('a, 'b, 'c) folds = ('a, 'b, 'c) fold list

type ('a, 'b, 'c) logistic_model = {
  positive_category : string;
  negative_category_opt : string option;
  features : feature list;
  num_folds: int;
  folds : ('a, 'b, 'c) folds;
} <ocaml field_prefix="bi_">

type ('a, 'b, 'c) regression_model = {
  features : feature list;
  num_folds: int;
  folds : ('a, 'b, 'c) folds;
} <ocaml field_prefix="re_">

type ('a, 'b, 'c) custom_model = {
  levels: float list <ocaml repr="array">;
  features : feature list;
  num_folds: int;
  folds : ('a, 'b, 'c) folds;
} <ocaml field_prefix="cu_">

type ('a, 'b, 'c) model = [
  | Logistic of ('a, 'b, 'c) logistic_model
  | Square of ('a, 'b, 'c) regression_model
  | Custom of ('a, 'b, 'c) custom_model
]
type ('a, 'b) storage_model = [
  | Logistic of ('a, 'b, float) logistic_model
  | Square of ('a, 'b, float) regression_model
  | Custom of ('a, 'b, int) custom_model
]

(* this representation is used in the process of learning *)
type 'c l_logistic_model   = (int, direction_array, 'c) logistic_model
type 'c l_regression_model = (int, direction_array, 'c) regression_model
type 'c l_custom_model     = (int, direction_array, 'c) custom_model
(* type 'c l_ensemble         = (int, direction_array, 'c) ensemble *)
type 'c l_trees            = (int, direction_array, 'c) trees
type 'c l_tree             = (int, direction_array, 'c) tree
type 'c l_folds            = (int, direction_array, 'c) folds

type 'c l_model = (int, direction_array, 'c) model

(* this more compact representaiton is used for serializing and
   evaluating models outside of the learner *)
type 'c c_logistic_model   = (float, direction_rle, 'c) logistic_model
type 'c c_regression_model = (float, direction_rle, 'c) regression_model
type 'c c_custom_model     = (float, direction_rle, 'c) custom_model
(* type 'c c_ensemble         = (float, direction_rle, 'c) ensemble *)
type 'c c_trees            = (float, direction_rle, 'c) trees
type 'c c_tree             = (float, direction_rle, 'c) tree
type 'c c_folds            = (float, direction_rle, 'c) folds

type 'c c_model = (float, direction_rle, 'c) model
type c_storage_model = (float, direction_rle) storage_model
